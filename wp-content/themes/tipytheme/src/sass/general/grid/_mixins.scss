//Clearfix
@mixin clearfix() {

	&:before,
	&:after {
		content: ' ';
		display: table;
	}

	&:after {
		clear: both;
	}
}

// Grid system
//
// Generate semantic grid columns with these mixins.
// Centered container element
@mixin wrapper-fluid($gutter: $grid-gutter-width) {
	margin-right: auto;
	margin-left: auto;
	padding-left:  $gutter / 2;
	padding-right: $gutter / 2;
	@include clearfix;
}

@mixin wrapper($gutter: $grid-gutter-width) {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	padding-left:  $gutter / 2;
	padding-right: $gutter / 2;
	@include clearfix;

	@media (min-width: $screen-sm-min) {
		width: $wrapper-sm;
	}

	@media (min-width: $screen-md-min) {
		width: $wrapper-md;
	}

	@media (min-width: $screen-lg-min) {
		width: $wrapper-lg;
	}
}

// Creates a wrapper for a series of columns
@mixin wrap($gutter: $grid-gutter-width) {
	margin-left:  $gutter / -2;
	margin-right: $gutter / -2;
	@include clearfix;
}

// Generate the extra small columns
@mixin xs($columns, $gutter: $grid-gutter-width) {
	$temp-width-var: percentage(($columns / $grid-columns));
	position: relative;
	float: left;
	width: $temp-width-var;
	min-height: 1px;
	padding-left:  calc($gutter / 2);
	padding-right: calc($gutter / 2);

	@media not all and (min-resolution:.001dpcm) {

		@supports (-webkit-appearance:none) {
			width: calc(#{$temp-width-var} - 1px);
		}
	}
}

@mixin xs-offset($columns) {
	margin-left: percentage(($columns / $grid-columns));
}

@mixin xs-push($columns) {
	left: percentage(($columns / $grid-columns));
}

@mixin xs-pull($columns) {
	right: percentage(($columns / $grid-columns));
}

// Generate the phone columns
@mixin ph($columns, $gutter: $grid-gutter-width) {
	$temp-width-var: percentage(($columns / $grid-columns));
	position: relative;
	min-height: 1px;
	padding-left:  calc($gutter / 2);
	padding-right: calc($gutter / 2);

	@media (min-width: $screen-xs-min) {
		float: left;
		width: $temp-width-var;
	}

	@media not all and (min-resolution:.001dpcm) {

		@supports (-webkit-appearance:none) {

			@media (min-width: $screen-xs-min) {
				width: calc(#{$temp-width-var} - 1px);
			}
		}
	}
}

@mixin ph-offset($columns) {

	@media (min-width: $screen-xs-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}

@mixin ph-push($columns) {

	@media (min-width: $screen-xs-min) {
		left: percentage(($columns / $grid-columns));
	}
}

@mixin ph-pull($columns) {

	@media (min-width: $screen-xs-min) {
		right: percentage(($columns / $grid-columns));
	}
}


// Generate the small columns
@mixin sm($columns, $gutter: $grid-gutter-width) {
	$temp-width-var: percentage(($columns / $grid-columns));
	position: relative;
	min-height: 1px;
	padding-left:  calc($gutter / 2);
	padding-right: calc($gutter / 2);

	@media (min-width: $screen-sm-min) {
		float: left;
		width: $temp-width-var;
	}

	@media not all and (min-resolution:.001dpcm) {

		@supports (-webkit-appearance:none) {

			@media (min-width: $screen-sm-min) {
				width: calc(#{$temp-width-var} - 1px);
			}
		}
	}
}

@mixin sm-offset($columns) {

	@media (min-width: $screen-sm-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}

@mixin sm-push($columns) {

	@media (min-width: $screen-sm-min) {
		left: percentage(($columns / $grid-columns));
	}
}

@mixin sm-pull($columns) {

	@media (min-width: $screen-sm-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the medium columns
@mixin md($columns, $gutter: $grid-gutter-width) {
	$temp-width-var: percentage(($columns / $grid-columns));
	position: relative;
	min-height: 1px;
	padding-left:  calc($gutter / 2);
	padding-right: calc($gutter / 2);

	@media (min-width: $screen-md-min) {
		float: left;
		width: $temp-width-var;
	}

	@media not all and (min-resolution:.001dpcm) {

		@supports (-webkit-appearance:none) {

			@media (min-width: $screen-md-min) {
				width: calc(#{$temp-width-var} - 1px);
			}
		}
	}
}

@mixin md-offset($columns) {

	@media (min-width: $screen-md-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}

@mixin md-push($columns) {

	@media (min-width: $screen-md-min) {
		left: percentage(($columns / $grid-columns));
	}
}

@mixin md-pull($columns) {

	@media (min-width: $screen-md-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the large columns
@mixin lg($columns, $gutter: $grid-gutter-width) {
	$temp-width-var: percentage(($columns / $grid-columns));
	position: relative;
	min-height: 1px;
	padding-left:  calc($gutter / 2);
	padding-right: calc($gutter / 2);

	@media (min-width: $screen-lg-min) {
		float: left;
		width: $temp-width-var;
	}

	@media not all and (min-resolution:.001dpcm) {

		@supports (-webkit-appearance:none) {

			@media (min-width: $screen-lg-min) {
				width: calc(#{$temp-width-var} - 1px);
			}
		}
	}
}

@mixin lg-offset($columns) {

	@media (min-width: $screen-lg-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}

@mixin lg-push($columns) {

	@media (min-width: $screen-lg-min) {
		left: percentage(($columns / $grid-columns));
	}
}

@mixin lg-pull($columns) {

	@media (min-width: $screen-lg-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Grid Framework

@mixin make-grid-columns($i: 1, $list: ".xs-#{$i}, .ph-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}") {

	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .xs-#{$i}, .ph-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}";
	}

	#{$list} {
		position: relative;
		min-height: 1px;
		padding-left:  $grid-gutter-width / 2;
		padding-right: $grid-gutter-width / 2;
	}
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".#{$class}-#{$i}") {

	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .#{$class}-#{$i}";
	}

	#{$list} {
		float: left;
	}
}


@mixin calc-grid-column($index, $class, $type) {

	$number: $index / $grid-columns;

	@if ($type == width) and ($index > 0) {

		.#{$class}-#{$index} {
			width: percentage($number);
		}
	}

	@if ($type == push) and ($index > 0) {

		.#{$class}-push-#{$index} {
			left: percentage($number);
		}
	}

	@if ($type == push) and ($index == 0) {

		.#{$class}-push-0 {
			left: auto;
		}
	}

	@if ($type == pull) and ($index > 0) {

		.#{$class}-pull-#{$index} {
			right: percentage($number);
		}
	}

	@if ($type == pull) and ($index == 0) {

		.#{$class}-pull-0 {
			right: auto;
		}
	}

	@if ($type == offset) {

		.#{$class}-offset-#{$index} {
			margin-left: percentage($number);
		}
	}
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {

	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}


// Create grid for specific class
@mixin make-grid($class) {
	@include float-grid-columns($class);
	@include loop-grid-columns($grid-columns, $class, width);
	@include loop-grid-columns($grid-columns, $class, pull);
	@include loop-grid-columns($grid-columns, $class, push);
	@include loop-grid-columns($grid-columns, $class, offset);
}

.wrapper {
	@include wrapper;
}


// Fluid container
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.wrapper-fluid {
	@include wrapper-fluid;
}

.clearfix,
.cf {
	@include clearfix;
}

// Wrap
//
// Rows contain and clear the floats of your columns.

.wrap {
	@include wrap;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);

// Phone grid
//
// Portrait phones

@media (min-width: $screen-xs-min) {
	@include make-grid(ph);
}


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
	@include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
	@include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
	@include make-grid(lg);
}
